<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RAKIT | <%= title %></title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        #chartdiv {
            width : 100%;
            height: 1200px;
        }
    </style>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.6/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
</head>
<body>
    <div style="margin: auto; width: 90%; text-align: center;">
        <div class="row mt-2 mb-3">
            <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12">
                <div id="monitoringContainer" class="card text-center">
                    <div class="card-header">
                        <%= title %>
                    </div>
                    <div class="card-body">
                        <!-- <button id="btnAddChart">Add</button> -->
                        <!-- <button id="btnUpdateChart">Update</button> -->
        
                        <div id="chartdiv"></div>
                    </div>
                    <div class="card-footer text-body-secondary">
                        <button type="button" class="btn btn-success btn-sm" id="btnStart">Start</button>
                        <!-- <button type="button" class="btn btn-info btn-sm" id="btnReplayChart">Replay</button> -->
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12">
                <div id="finisherContainer" class="card text-center">
                    <div class="card-header">
                        Finisher
                    </div>
                    <div class="card-body">
                        <table width="100%" class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th width="20px">No</th>
                                    <th>Username</th>
                                    <th width="100px">Point</th>
                                    <th width="100px">Waktu</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket     = io();
        var   finisher   = [];
        var   finisherNo = 0;

        am5.ready(function() {
            // Data
            var allData = {
                "2018": {}
            };

            // Create root element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            var root = am5.Root.new("chartdiv");

            root.numberFormatter.setAll({
            numberFormat: "#a",

            // Group only into M (millions), and B (billions)
            bigNumberPrefixes: [
                { number: 1e6, suffix: "M" },
                { number: 1e9, suffix: "B" }
            ],

            // Do not use small number prefixes at all
            smallNumberPrefixes: []
            });

            var stepDuration = 2000;

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root.setThemes([am5themes_Animated.new(root)]);

            // Create chart
            // https://www.amcharts.com/docs/v5/charts/xy-chart/
            var chart = root.container.children.push(am5xy.XYChart.new(root, {
                panX: true,
                panY: true,
                wheelX: "none",
                wheelY: "none",
                paddingLeft: 0
            }));

            // We don't want zoom-out button to appear while animating, so we hide it at all
            chart.zoomOutButton.set("forceHidden", true);

            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/
            var yRenderer = am5xy.AxisRendererY.new(root, {
                minGridDistance: 20,
                inversed: true,
                minorGridEnabled: true
            });
            // hide grid
            yRenderer.grid.template.set("visible", false);

            var yAxis = chart.yAxes.push(am5xy.CategoryAxis.new(root, {
                maxDeviation: 0,
                categoryField: "network",
                renderer: yRenderer
            }));

            var xAxis = chart.xAxes.push(am5xy.ValueAxis.new(root, {
                maxDeviation: 0,
                min: 0,
                strictMinMax: true,
                extraMax: 0.1,
                renderer: am5xy.AxisRendererX.new(root, {})
            }));

            xAxis.set("interpolationDuration", stepDuration / 10);
            xAxis.set("interpolationEasing", am5.ease.linear);

            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
            var series = chart.series.push(am5xy.ColumnSeries.new(root, {
                xAxis: xAxis,
                yAxis: yAxis,
                valueXField: "value",
                categoryYField: "network"
            }));

            // Rounded corners for columns
            series.columns.template.setAll({ cornerRadiusBR: 5, cornerRadiusTR: 5 });

            // Make each column to be of a different color
            series.columns.template.adapters.add("fill", function (fill, target) {
                return chart.get("colors").getIndex(series.columns.indexOf(target));
            });

            series.columns.template.adapters.add("stroke", function (stroke, target) {
                return chart.get("colors").getIndex(series.columns.indexOf(target));
            });

            // Add label bullet
            series.bullets.push(function () {
                return am5.Bullet.new(root, {
                    locationX: 1,
                    sprite: am5.Label.new(root, {
                        text: "{valueXWorking.formatNumber('#.# a')}",
                        fill: root.interfaceColors.get("alternativeText"),
                        centerX: am5.p100,
                        centerY: am5.p50,
                        populateText: true
                    })
                });
            });

            var label = chart.plotContainer.children.push(am5.Label.new(root, {
                text: "Rakit",
                fontSize: "8em",
                opacity: 0.2,
                x: am5.p100,
                y: am5.p100,
                centerY: am5.p100,
                centerX: am5.p100
            }));

            // Get series item by category
            function getSeriesItem(category) {
                for (var i = 0; i < series.dataItems.length; i++) {
                    var dataItem = series.dataItems[i];
                    if (dataItem.get("categoryY") == category) {
                        return dataItem;
                    }
                }
            }

            // Axis sorting
            function sortCategoryAxis() {
                // sort by value
                series.dataItems.sort(function (x, y) {
                    return y.get("valueX") - x.get("valueX"); // descending
                    //return x.get("valueX") - y.get("valueX"); // ascending
                });

                // go through each axis item
                am5.array.each(yAxis.dataItems, function (dataItem) {
                    // get corresponding series item
                    var seriesDataItem = getSeriesItem(dataItem.get("category"));

                    if (seriesDataItem) {
                        // get index of series data item
                        var index = series.dataItems.indexOf(seriesDataItem);
                        // calculate delta position
                        var deltaPosition =
                            (index - dataItem.get("index", 0)) / series.dataItems.length;
                        // set index to be the same as series data item index
                        if (dataItem.get("index") != index) {
                            dataItem.set("index", index);
                            // set deltaPosition instanlty
                            dataItem.set("deltaPosition", -deltaPosition);
                            // animate delta position to 0
                            dataItem.animate({
                                key: "deltaPosition",
                                to: 0,
                                duration: stepDuration / 2,
                                easing: am5.ease.out(am5.ease.cubic)
                            });
                        }
                    }
                });
                // sort axis items by index.
                // This changes the order instantly, but as deltaPosition is set, they keep in the same places and then animate to true positions.
                yAxis.dataItems.sort(function (x, y) {
                    return x.get("index") - y.get("index");
                });
            }

            var year = 2018;

            // update data with values each 1.5 sec
            var interval = setInterval(function () {
                year++;

                if (year > 2018) {
                    clearInterval(interval);
                    clearInterval(sortInterval);
                }

                updateData();
            }, stepDuration);

            var sortInterval = setInterval(function () {
                sortCategoryAxis();
            }, 100);

            function setInitialData() {
                var d = allData[year];

                for (var n in d) {
                    series.data.push({ network: n, value: d[n] });
                    yAxis.data.push({ network: n });
                }
            }

            function updateData() {
                var itemsWithNonZero = 0;

                if (allData[year]) {
                    label.set("text", "Rakit");

                    am5.array.each(series.dataItems, function (dataItem) {
                        var category = dataItem.get("categoryY");
                        var value = allData[year][category];

                        // if (value > 0) {
                            itemsWithNonZero++;
                        // }

                        dataItem.animate({
                            key: "valueX",
                            to: value,
                            duration: stepDuration,
                            easing: am5.ease.linear
                        });
                        dataItem.animate({
                            key: "valueXWorking",
                            to: value,
                            duration: stepDuration,
                            easing: am5.ease.linear
                        });
                    });

                    yAxis.zoom(0, itemsWithNonZero / yAxis.dataItems.length);
                }
            }

            setInitialData();
            setTimeout(function () {
                year++;
                updateData();
            }, 50);

            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            series.appear(1000);
            chart.appear(1000, 100);

            /* var addN = 1;
            btnAddChart.addEventListener('click', function(e) {
                e.preventDefault();
                if (addN > 50) {
                    alert('Failed!');
                    return;
                }
                
                const k = [
                    "Friendster",
                    "Facebook",
                    "Flickr",
                    "Google Buzz",
                    "Google+",
                    "Hi5",
                    "Instagram",
                    "MySpace",
                    "Orkut",
                    "Pinterest",
                    "Reddit",
                    "Snapchat",
                    "TikTok",
                    "Tumblr",
                    "Twitter",
                    "WeChat",
                    "Weibo",
                    "Whatsapp",
                    "YouTube",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "49",
                    "50",
                ];
                const n = k[addN];

                year             = 2018;
                allData[year][n] = 0;

                console.log(allData);

                series.data.push({ network: n, value: 0 });
                yAxis.data.push({ network: n });

                addN++;
            }); */

            /* btnUpdateChart.addEventListener('click', function(e) {
                e.preventDefault();

                const k = [
                    "Friendster",
                    "Facebook",
                    "Flickr",
                    "Google Buzz",
                    "Google+",
                    "Hi5",
                    "Instagram",
                    "MySpace",
                    "Orkut",
                    "Pinterest",
                    "Reddit",
                    "Snapchat",
                    "TikTok",
                    "Tumblr",
                    "Twitter",
                    "WeChat",
                    "Weibo",
                    "Whatsapp",
                    "YouTube"
                ];
                const r = Math.floor((Math.random() * 18) + 0);
                const kR = k[r]; 

                allData[2018][kR] = (allData[2018][kR] > 0)? allData[2018][kR] + (r + 1) : allData[2018][kR] + (r + 10);

                year = 2018;
                setInterval(function () {
                    sortCategoryAxis();
                }, 100);
                updateData();
            }); */

            /* btnReplayChart.addEventListener('click', function(e) {
                e.preventDefault();
            }); */

            socket.on("join", (id, username) => {
                year = 2018;
                const dtSet = allData[year];

                if (dtSet[username] !== undefined) {
                    socket.emit("join-failed", {id, username});
                    return false;
                }

                dtSet[username] = 0;

                series.data.push({ network: username, value: 0 });
                yAxis.data.push({ network: username });
            });

            socket.on("answer", (...data) => {
                const [id, username, point, isFinish] = data;
                const dtSet                           = allData[year];
                let   pointTotal                      = dtSet[username];

                pointTotal += point

                year            = 2018;
                dtSet[username] = pointTotal;

                setInterval(function () {
                    sortCategoryAxis();
                }, 100);
                updateData();

                if (isFinish) {
                    const dtFinisher = {id, username, point: pointTotal, isFinish};

                    finisher.push(dtFinisher);
                    setFinisher(dtFinisher)
                }
            });
        }); // end am5.ready()

        btnStart.addEventListener('click', function(e) {
            socket.emit("start");
        });

        function setFinisher(data = {}) {
            const content = `
            <tr>
                <td>${++finisherNo}</td>
                <td>${data.username}</td>
                <td>${data.point.toFixed(2)}</td>
                <td>${moment().format("HH:mm:ss")}</td>
            </tr>
            `;

            $('#finisherContainer table tbody').append(content);
        }
    </script>
</body>
</html>